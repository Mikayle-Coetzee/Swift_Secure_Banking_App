name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd react-project-apds/BACKEND
          npm install

      # Step 4: Fix permissions for node_modules and binaries
      - name: Fix permissions for node_modules and binaries
        run: sudo chown -R $USER:$GROUP ./react-project-apds/node_modules

      # Step 5: Ensure react-scripts execution permissions
      - name: Ensure react-scripts execution permissions
        run: chmod +x ./react-project-apds/node_modules/.bin/react-scripts

      # Step 6: Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd react-project-apds  
          npm install --legacy-peer-deps

      # Step 7: Ensure react-scripts is installed
      - name: Ensure react-scripts is installed
        run: |
          npm install react-scripts --legacy-peer-deps
        
      # Step 10: Check SSL configuration
      - name: Check SSL configuration
        run: |
          cd react-project-apds 
          if [ ! -f ./BACKEND/keys/privatekey.pem ] || [ ! -f ./BACKEND/keys/certificate.pem ]; then
            echo "SSL certificate or key missing"
            exit 1
          fi

      # Step 3: Install HTTPie
      - name: Install HTTPie
        run: |
          pip install httpie

      # Step 4: Start your backend server (if needed)
      - name: Start Backend Server
        run: |
          # Assuming you have a command to start your server, e.g.:
          nohup node ./BACKEND/server.js &  # Start server in the background
          sleep 5  # Wait for a few seconds to ensure the server is up

      # Step 13: Check for protection against additional attacks
      - name: Security Attack Checks
        run: |
          cd react-project-apds 
      
          # Check for Clickjacking Protection
          if ! grep -q "frameguard" ./BACKEND/app.js; then
            echo "Clickjacking protection missing (Helmet's frameguard)"
          else
            echo "Clickjacking protection is present."
          fi
      
          # Check for Session Hijacking Protection
          if ! grep -q "cookie-session" ./BACKEND/app.js; then
            echo "Session hijacking protection missing (cookie-session or express-session)"
          else
            echo "Session hijacking protection is present."
          fi
      
          # Check for SQL Injection Prevention
          if ! grep -q "parameterized queries" ./BACKEND/db.js; then
            echo "SQL Injection protection missing (use parameterized queries)"
          else
            echo "SQL Injection protection is present."
          fi
      
          # Check for Cross-Site Scripting (XSS) Protection
          if ! grep -q "xss-clean" ./BACKEND/app.js; then
            echo "XSS protection missing (xss-clean middleware)"
          else
            echo "XSS protection is present."
          fi
      
          # Check for Man-in-the-Middle Attack Protection
          if ! grep -q "strict-transport-security" ./BACKEND/app.js; then
            echo "HSTS header missing (use Helmet to enforce Strict-Transport-Security)"
          else
            echo "HSTS protection is present."
          fi
      
          # DDoS Protection (Rate Limiting and Network Throttling)
          if ! grep -q "express-rate-limit" ./BACKEND/app.js; then
            echo "DDoS protection missing (express-rate-limit middleware)"
          else
            echo "DDoS protection is present."
          fi


      # Step 14: Upload results 
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
