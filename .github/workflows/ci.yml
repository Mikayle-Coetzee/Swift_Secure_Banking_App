name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'


      # Step 3: Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd react-project-apds
          cd BACKEND
          npm install

     # Step 4: Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd react-project-apds  
          npm install

    # Ensure react-scripts is installed
      - name: Ensure react-scripts is installed
        run: |
         npm install react-scripts

      # Step 5: Build React App
      - name: Build React App
        run: |
          cd react-project-apds  
          npm run build

      # Step 6: Check for known vulnerabilities in dependencies
      - name: Run npm audit
        run: npm audit --audit-level=high

      # Step 7: Check SSL configuration
      - name: Check SSL configuration
        run: |
          if [ ! -f ./keys/privatekey.pem ] || [ ! -f ./keys/certificate.pem ]; then
            echo "SSL certificate or key missing" && exit 1
          fi

      # Step 8: Check HTTPS redirection and security middleware
      - name: Check HTTPS redirection
        run: |
          if ! curl -s -o /dev/null -w "%{http_code}" https://localhost:3001 | grep -q "301"; then
            echo "HTTPS redirection not enforced" && exit 1
          fi

      # Step 9: Run server integration check
      - name: Run server check
        run: |
          node ./backend/server.js &
          sleep 10
          curl -f http://localhost:3001 || exit 1

      # Step 10: Check for protection against additional attacks
      - name: Security Attack Checks
        run: |
          # Check for Clickjacking Protection
          if ! grep -q "frameguard" ./backend/app.js; then
            echo "Clickjacking protection missing (Helmet's frameguard)" && exit 1
          fi

          # Check for Session Jacking Protection
          if ! grep -q "cookie-session" ./backend/app.js; then
            echo "Session hijacking protection missing (cookie-session or express-session)" && exit 1
          fi

          # Check for SQL Injection Prevention
          if ! grep -q "parameterized queries" ./backend/db.js; then
            echo "SQL Injection protection missing (use parameterized queries)" && exit 1
          fi

          # Check for Cross-Site Scripting (XSS) Protection
          if ! grep -q "xss-clean" ./backend/app.js; then
            echo "XSS protection missing (xss-clean middleware)" && exit 1
          fi

          # Check for Man-in-the-Middle Attack Protection
          if ! grep -q "strict-transport-security" ./backend/app.js; then
            echo "HSTS header missing (use Helmet to enforce Strict-Transport-Security)" && exit 1
          fi

          # DDoS Protection (Rate Limiting and Network Throttling)
          if ! grep -q "express-rate-limit" ./backend/app.js; then
            echo "DDoS protection missing (express-rate-limit middleware)" && exit 1
          fi

      # Step 11: Upload results 
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
